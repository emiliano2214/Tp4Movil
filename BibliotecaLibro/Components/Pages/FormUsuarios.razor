@page "/FormUsuario"
@page "/FormUsuario/{id:int?}"
@using BibliotecaLibro.Shared.Models
@inject BibliotecaLibro.Servicios.UsuarioServicio UsuarioServicio
@inject NavigationManager Navigation

<div style="text-align:center;">
    <img src="Images/logo.png" alt="Logo" style="max-width:200px" />
</div>

<h3>@(EsNuevo ? "Agregar Usuario" : "Editar Usuario")</h3>

<button class="btn btn-primary p-3 mb-3" @onclick="IrAlMenu">
    <img src="Images/Iconos/Menu.png" width="50" class="me-1" />
    Menú
</button>

@if (cargando)
{
    <div class="alert alert-info">Cargando usuario...</div>
}
else
{
    @if (EsNuevo)
    {
        <!-- ===== ALTA: UsuarioCreateDTO (CON contraseña) ===== -->
        <EditForm Model="@CreateModel" OnValidSubmit="GuardarNuevo">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Nombre de Usuario:</label>
                <InputText class="form-control" @bind-Value="CreateModel.NombreUsuario" />
            </div>

            <div class="mb-3">
                <label class="form-label">Contraseña:</label>
                <InputText type="password" class="form-control" @bind-Value="CreateModel.Contraseña" />
            </div>

            <div class="mb-3">
                <label class="form-label">Privilegio:</label>
                <InputSelect class="form-control" @bind-Value="CreateModel.Privilegio">
                    <option value="">Seleccionar privilegio</option>
                    <option value="Admin">Administrador</option>
                    <option value="Usuario">Usuario</option>
                    <option value="Moderador">Moderador</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Nombre de la Imagen (ej. face1.png):</label>
                <InputText class="form-control" @bind-Value="CreateModel.Img" />
            </div>

            @if (!string.IsNullOrWhiteSpace(CreateModel.Img))
            {
                <div class="mb-3">
                    <label class="form-label">Vista previa de la imagen:</label>
                    <div><img src="@($"Images/Usuarios/{CreateModel.Img}")" style="max-width:150px;max-height:150px;border-radius:8px;" /></div>
                </div>
            }

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-success" disabled="@guardando">
                    @(guardando ? "Guardando..." : "Agregar")
                </button>
                <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
            </div>
        </EditForm>
    }
    else
    {
        <!-- ===== EDICIÓN: UsuarioUpdateDTO (SIN contraseña) ===== -->
        <EditForm Model="@EditModel" OnValidSubmit="GuardarEdicion">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3">
                <label class="form-label">Id</label>
                <Inputint class="form-control" Value="@EditModel.IdUsuario" Disabled="true" />
            </div>

            <div class="mb-3">
                <label class="form-label">Nombre de Usuario:</label>
                <InputText class="form-control" @bind-Value="EditModel.NombreUsuario" />
            </div>

            <div class="mb-3">
                <label class="form-label">Privilegio:</label>
                <InputSelect class="form-control" @bind-Value="EditModel.Privilegio">
                    <option value="">Seleccionar privilegio</option>
                    <option value="Admin">Administrador</option>
                    <option value="Usuario">Usuario</option>
                    <option value="Moderador">Moderador</option>
                </InputSelect>
            </div>

            <div class="mb-3">
                <label class="form-label">Nombre de la Imagen (ej. face1.png):</label>
                <InputText class="form-control" @bind-Value="EditModel.Img" />
            </div>

            @if (!string.IsNullOrWhiteSpace(EditModel.Img))
            {
                <div class="mb-3">
                    <label class="form-label">Vista previa de la imagen:</label>
                    <div><img src="@($"Images/Usuarios/{EditModel.Img}")" style="max-width:150px;max-height:150px;border-radius:8px;" /></div>
                </div>
            }

            <div class="d-flex gap-2">
                <button type="submit" class="btn btn-success" disabled="@guardando">
                    @(guardando ? "Guardando..." : "Guardar Cambios")
                </button>
                <button type="button" class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
            </div>
        </EditForm>
    }
}

@code {
    [Parameter] public int? id { get; set; }

    private bool cargando = false;
    private bool guardando = false;

    // Modelos correctos para cada operación
    private UsuarioCreateDTO CreateModel = new() { Privilegio = "Usuario" };
    private UsuarioUpdateDTO EditModel = new();

    private bool EsNuevo => !id.HasValue || id.Value == 0;

    protected override async Task OnInitializedAsync() => await CargarUsuario();
    protected override async Task OnParametersSetAsync() => await CargarUsuario();

    private async Task CargarUsuario()
    {
        if (EsNuevo)
        {
            CreateModel = new UsuarioCreateDTO { Privilegio = "Usuario" };
            return;
        }

        cargando = true;
        try
        {
            var existente = await UsuarioServicio.GetUsuarioAsync(id!.Value);
            if (existente is not null)
            {
                EditModel = new UsuarioUpdateDTO
                {
                    IdUsuario = existente.IdUsuario,
                    NombreUsuario = existente.NombreUsuario,
                    Privilegio = existente.Privilegio,
                    Img = existente.Img
                };
            }
        }
        finally { cargando = false; }
    }

    private async Task GuardarNuevo()
    {
        guardando = true;
        try
        {
            var ok = await UsuarioServicio.AddUsuarioAsync(CreateModel);
            if (ok) Navigation.NavigateTo("/usuarios");
            // else: mostrar toast/alert
        }
        finally { guardando = false; }
    }

    private async Task GuardarEdicion()
    {
        guardando = true;
        try
        {
            var ok = await UsuarioServicio.UpdateUsuarioAsync(EditModel);
            if (ok) Navigation.NavigateTo("/usuarios");
        }
        finally { guardando = false; }
    }

    private void Cancelar() => Navigation.NavigateTo("/usuarios");
    private void IrAlMenu() => Navigation.NavigateTo("/menu");
}
